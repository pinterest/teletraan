{% if metrics %}
<div class="panel panel-default">
    <div class="panel-heading clearfix">
        <h4 class="panel-title pull-left pointer-cursor">
            <a data-toggle="collapse" data-target="#siteHealthEnvId">
                <span id="siteHealthEnvId_Toggler"
                      class="glyphicon glyphicon-chevron-down"></span>
                Metrics
            </a>
        </h4>

        <div class="btn-group pull-right">
            {% for config in metrics %}
            {% if config.title == "dashboard" %}
            <a id="dashboard" type="button" class="deployToolTip btn btn-default btn-sm" 
                data-toggle="tooltip" 
                href="{{ config.url }}" 
                target="_blank" title="" 
                data-original-title="Click to see the metrics dashboard for this service.">
                <large>Dashboard</large>
            </a>
            {% endif %}
            {% endfor %}

            {% if not metrics_dashboard_only %}
            <div class="btn-group" data-toggle="buttons">
               <label class="btn btn-default btn-sm" id="choose-gauge">
                    <input type="radio" name="options" autocomplete="off">
                    Gauge
                </label>
                <label class="btn btn-default btn-sm" id="choose-chart">
                    <input type="radio" name="options" autocomplete="off">
                    Chart
                </label>
            </div>
            {% endif %}
        </div>
    </div>

    <div id="siteHealthEnvId" class="collapse in panel-body">
        <div id="alarmDivId"></div>
        <div class="row" align="center" id="site_health_gauges">
            {% for config in metrics %}
              {% if config.title  != "dashboard" %}
                <div class="col-md-3 col-centered">
                    <div id="gauge_{{ config.title }}" align="center"></div>
                </div>
              {% endif %}
            {% endfor %}
        </div>
        <div class="row" align="center" id="site_health_charts">
            {% for config in metrics %}
              {% if config.title  != "dashboard" %}
                <div class="col-md-3 col-centered">
                    <div id="chart_{{ config.title }}" align="center"></div>
                </div>
              {% endif %}  
            {% endfor %}
        </div>
    </div>
</div>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script>
    google.load("visualization", "1", {packages: ["corechart", "gauge", "line"]});
    google.setOnLoadCallback(initialize);

    var select_cookie_name = 'site-health-graph-selection';
    var toggle_cookie_name = 'site-health-panel-toggle';

    // initilization based on cookie
    var cookie_toggle = Cookies.get(toggle_cookie_name);
    if (cookie_toggle == 'hide') {
        $('#siteHealthEnvId').collapse('hide');
        $('#siteHealthEnvId_Toggler').toggleClass('glyphicon-chevron-down glyphicon-chevron-right', 100);
    }

    $(function () {
        $('#choose-gauge').on('click', function () {
            Cookies.set(select_cookie_name, 'gauge');
            $('#site_health_charts').hide();
            $('#site_health_gauges').show();
        });
        $('#choose-chart').on('click', function () {
            Cookies.set(select_cookie_name, 'chart');
            $('#site_health_gauges').hide();
            $('#site_health_charts').show();
        });
        $('#siteHealthEnvId').on('hide.bs.collapse', function () {
            $('#siteHealthEnvId_Toggler').toggleClass('glyphicon-chevron-down glyphicon-chevron-right', 100);
            Cookies.set(toggle_cookie_name, 'hide');
        });
        $('#siteHealthEnvId').on('show.bs.collapse', function () {
            $('#siteHealthEnvId_Toggler').toggleClass('glyphicon-chevron-down glyphicon-chevron-right', 100);
            Cookies.set(toggle_cookie_name, 'show');
        });
    });

    var cookie_selection = Cookies.get(select_cookie_name);
    if (cookie_selection == 'chart') {
        $('#choose-chart').click();
        $('#site_health_charts').show();
        $('#site_health_gauges').hide();
    } else {
        $('#choose-gauge').click();
        $('#site_health_charts').hide();
        $('#site_health_gauges').show();
    }

    var gauge_datas = {};
    var chart_datas = {};
    var gauge_options = {};
    var chart_options = {};
    var gauge_charts = {};
    var chart_charts = {};

    function drawGauges(w, h, title, specs, gauge_id) {
        var data = google.visualization.arrayToDataTable([
            ['Label', 'Value'],
            [title, 0],
        ]);

        var options = {
            width: w, height: h,
            minorTicks: 5,
        };

        // figure out min and max
        var min = Number.MAX_VALUE;
        var max = 0;
        for(var i=0; i < specs.length; i++) {
            spec_min = specs[i]['min'];
            spec_max = specs[i]['max'];
            min = Math.min(min, spec_min);
            max = Math.max(max, spec_max);
            if (specs[i]['color'] == "Green") {
                options['greenFrom'] = spec_min;
                options['greenTo'] = spec_max;
            }
            if (specs[i]['color'] == "Yellow") {
                options['yellowFrom'] = spec_min;
                options['yellowTo'] = spec_max;
            }
            if (specs[i]['color'] == "Red") {
                options['redFrom'] = spec_min;
                options['redTo'] = spec_max;
            }
        }

        options['min'] = min;
        options['max'] = max;

        var chart = new google.visualization.Gauge(document.getElementById(gauge_id));

        // Remember data, options and charts for future reference
        gauge_datas[title] = data;
        gauge_options[title] = options;
        gauge_charts[title] = chart;

        // Draw the init gauge for the first time
        chart.draw(data, options);
    }

    function drawCharts(w, h, title, datas, chart_id) {
        var options = {
            width: w, height: h,
            title: title,
            legend: { position: 'none' }
        };

        var data = new google.visualization.DataTable();
        data.addColumn('datetime', 'X');
        data.addColumn('number', 'X');
        for (var i = 0; i < datas.length; i++) {
            data.addRow([new Date(datas[i][0] * 1000), datas[i][1]]);
        }
        var chart = new google.visualization.LineChart(document.getElementById(chart_id));

        // Remember data, options and charts for future reference
        chart_datas[title] = data;
        chart_options[title] = options;
        chart_charts[title] = chart;

        chart.draw(data, options);
    }

    function initialize() {
        var specs = [];
        var spec = {};
        {% for config in metrics %}
        {% if config.title != "dashboard" %}
        specs = [];
        {% for spec in config.specs %}
        spec = {};
        spec['min'] = {{ spec.min }};
        spec['max'] = {{ spec.max }};
        spec['color'] = "{{ spec.color }}";
        specs.push(spec);
        {% endfor %}
        drawGauges(300, 150, "{{ config.title}}", specs, "gauge_{{ config.title }}");
        {% endif %}
        {% endfor %}

        //drawCharts();
        {% for config in metrics %}
        {% if config.title != "dashboard" %}
        drawCharts(300, 150, "{{ config.title}}", [], "chart_{{ config.title }}");
        {% endif %}
        {% endfor %}
    }

    function draw(metrics) {
        // Draw gauge
        for (var title in metrics) {
            var values = metrics[title];
            if(values) {
                var data = google.visualization.arrayToDataTable([
                    ['Label', 'Value'],
                    [title, 0],
                ]);
                data.setValue(0, 1, values[values.length - 1][1].toFixed(2));
                options = gauge_options[title];
                gauge_charts[title].draw(data, options);
            }
        }

        // Draw charts as well
        for (var title in metrics) {
            var values = metrics[title];
            if(values) {
                var data = new google.visualization.DataTable();
                data.addColumn('datetime', 'X');
                data.addColumn('number', 'X');
                for (var i = 0; i < values.length; i++) {
                    data.addRow([new Date(values[i][0] * 1000), values[i][1]]);
                }
                options = chart_options[title];
                chart_charts[title].draw(data, options);
            }
        }
    }

    var sh_startTime = new Date().getTime();
    function poll_metrics() {
        if (new Date().getTime() - sh_startTime > 3600000) {
            clearInterval(sh_interval);
        }

        {% if metricsKind == "site" %}
        $.get('/get_site_health_metrics/',function (response) {
        {% else %}
        $.get('/env/{{ env.envName }}/{{ env.stageName }}/get_service_metrics/', function (response) {
        {% endif %}
            draw(response.html);
        }).fail(function () {
            window.console && console.log('Failed to get metrics');
        });

        {% if env %}
        $('#alarmDivId').load('/env/{{ env.envName }}/{{ env.stageName }}/get_service_alarms/',
                function (responseText, textStatus, req) {
                    if (textStatus == "error") {
                        window.console && console.log('Failed to call get_service_alarms');
                    }
                });
        {% endif %}
    }

    poll_metrics();
    var sh_interval = setInterval(poll_metrics, 30000);
</script>
{% endif %}
