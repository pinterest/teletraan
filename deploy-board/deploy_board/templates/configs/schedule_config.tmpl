{% load utils %}

<div class="panel-heading clearfix">
    <h4 class="panel-title pull-left">Customize Deploy Schedule</h4>
</div>

<div id="envScheduleId" class="collapse in panel-body">
    <div class="container-fluid">
        <form id="envCapacityFormId" class="form-horizontal" role="form">
            <input id="useHostPercentages" name="useHostPercentages" type="checkbox">
            <label
                for="useHostPercentages"
                class="deployToolTip"
                data-toggle="tooltip"
                style="margin-left:3px;font-weight:normal"
                title="Check to specify host percentages instead of fixed numbers">
                Use Host Percentages
            </label>
            <br />
            <input id="useInfiniteCooldownPeriods" name="useInfiniteCooldownPeriods" type="checkbox">
            <label
                for="useInfiniteCooldownPeriods"
                class="deployToolTip"
                data-toggle="tooltip"
                style="margin-left:3px;font-weight:normal"
                title="Check to use infinite cooldown periods. Typically used with a pipeline that verifies each session">
                Use Infinite Cooldown Periods
            </label>
            <h4>Sessions</h4>
            <div>Note: All sessions will be able to be overidden during the deploy process. After the last session, all hosts can proceed</div>
            <br />
            <table id="sessionTable" class="table">
            <tr>
                <th class="col-md-3">Session #</th>
                <th id="hostNumberTitle" class="col-md-3">Number of Hosts</th>
                <th class="col-md-3">Cooldown Period</th>
                <th class="col-md-4"></th>
            </tr>
            </table>
            {% csrf_token %}
        </form>

        <button type="button" id="addSessionBtn" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span> Add another session</button>
    </div>
</div>

<div class="panel-footer clearfix">
    <div class="pull-right">
        <button id="saveEnvScheduleBtnId" class="btn btn-primary"
                >
            <span class="glyphicon glyphicon-refresh"></span> Save
        </button>
        <button id="resetEnvScheduleBtnId" class="btn btn-default"
                data-loading-text="Reloading...">
            <span class="glyphicon glyphicon-refresh"></span> Reset
        </button>
    </div>
</div>

<script type="text/javascript">
    let totalSessions = 0;

    // The number of agents in the final session, when using fixed host numbers
    let totalAgentCount = {{ agent_count }};

    $(document).ready(function() {
        {% if schedule %} //loads schedule information
            const cooldownTimes = "{{ schedule.cooldownTimes }}";
            const hostNumbers = "{{ schedule.hostNumbers }}";
            totalSessions = {{ schedule.totalSessions }};
            const timesArray = cooldownTimes.split(",");
            const numbersArray = hostNumbers.split(",");
            const useHostPercentages = numbersArray.every(n => n.endsWith("%"));
            const hostUnits = useHostPercentages ? "% hosts" : "hosts";
            const useInfiniteCooldownPeriods = timesArray.every(n => n === "-1");

            for (let i = 1; i <= totalSessions; i++) {
                let hostNumber = numbersArray[i - 1];
                if (hostNumber.endsWith("%")) {
                  hostNumber = hostNumber.slice(0, -1);
                }
                const cooldownTime = useInfiniteCooldownPeriods ? "Infinite" : timesArray[i - 1];
                const cooldownInputDisabled = useInfiniteCooldownPeriods ? "disabled" : "";
                const sessionHtml = buildSessionHtml(i, hostNumber, hostUnits, cooldownInputDisabled, cooldownTime);
                $("#sessionTable").append(sessionHtml);
                totalAgentCount = totalAgentCount - numbersArray[i-1];
            }

            $("#useHostPercentages").prop("checked", useHostPercentages);
            $("#useInfiniteCooldownPeriods").prop("checked", useInfiniteCooldownPeriods);

            updateHostUnits(useHostPercentages);
        {% else %}
            updateHostUnits(false);
        {% endif %}
    });

    $("#useHostPercentages").on("change", function() {
        resetSchedule();
        updateHostUnits($(this).is(":checked"));
    });

    $("#useInfiniteCooldownPeriods").on("change", function() {
        resetSchedule();
        updateHostUnits($("#useHostPercentages")[0].checked);
    });

    $(document.body).on("focus", ".hostNumber input", function() {
        if (!$("#useHostPercentages")[0].checked) {
            // if using fixed numbers, change final session's host numbers in realtime
            var n = parseInt($(this).val());
            if (!isNaN(n) && n % 1 === 0) { // if is number and is integer
                totalAgentCount = totalAgentCount + parseInt($(this).val());
            }
        }
    });

    $(document.body).on("blur", ".hostNumber input", function() {
        if (!$("#useHostPercentages")[0].checked) {
            // if using fixed numbers, change final session's host numbers in realtime
            var n = parseInt($(this).val());
            if (!isNaN(n) && n % 1 === 0) { // if is number and is integer
                totalAgentCount = totalAgentCount - parseInt($(this).val());
            }
        }
    });

    $("#addSessionBtn").click(function() {
        totalSessions=totalSessions+1;
        const hostUnits = $("#useHostPercentages")[0].checked ? "% hosts" : "hosts";
        const cooldownInputDisabled = $("#useInfiniteCooldownPeriods")[0].checked ? 'disabled' : "";
        const cooldownTime = $("#useInfiniteCooldownPeriods")[0].checked ? "Infinite" : "";
        const sessionHtml = buildSessionHtml(totalSessions, "", hostUnits, cooldownInputDisabled, cooldownTime);
        $('#sessionTable').append(sessionHtml);
    });

    $("#sessionTable").on("click", "#removeBtn", function () {
        if (!$("#useHostPercentages")[0].checked) {
            var n = parseInt($(this).closest('tr').find('.hostNumber input').val());
            if (!isNaN(n) && n % 1 === 0) {
                totalAgentCount = totalAgentCount+n;
            }
        }
        $(this).closest('tr').remove();
        totalSessions = totalSessions-1;
        counter = 1;
        $("#sessionTable tr").not(':first').each(function() { // renumbers the sessions
            var number = $(this).find(".sessionNumber");
            number.text(counter);
            counter=counter+1;
        })
    });

    $(document).on("keyup", "input", function() {
        $("#saveEnvScheduleBtnId").removeAttr('disabled');
    })

    $("#resetEnvScheduleBtnId").click(function() {
        resetSchedule();
        const useHostPercentages = $("#useHostPercentages")[0].checked;
        updateHostUnits(useHostPercentages);
    });

    $("#saveEnvScheduleBtnId").click(function() {
        $('.input-group').removeClass('has-error');
        $(this).attr('disabled', 'disabled');
        var error = false;

        const useHostPercentages = $("#useHostPercentages")[0].checked;
        if (!useHostPercentages) {
            // check if number of hosts entered doesn't exceed max
            if (totalAgentCount < 0) {
                $('#errorBannerId').text("Total number of hosts exceeds number of available hosts. Please reenter host numbers.");
                $('#errorBannerId').show();
                error = true;
            }
            if (error) { return; }
        }

        // check for valid cooldown time input values
        $("#sessionTable .cooldownTime input").each(function() {
            const inputVal = $(this).val();
            if (inputVal !== "Infinite" && isNaN(parseInt(inputVal))) {
                $(this).closest('.input-group').addClass('has-error');
                $('#errorBannerId').text("Please make sure all cooldown fields are valid integer values.");
                $('#errorBannerId').show();
                error = true;
            }
        })

        if (error) { return; }

        // check for valid host number input values
        const hostNumbersArray = [];
        $("#sessionTable .hostNumber input").each(function() {
            const number = parseInt($(this).val());
            if (isNaN(number)) {
                $(this).closest('.input-group').addClass('has-error');
                $('#errorBannerId').text("Please make sure all host number fields are valid integer values.");
                $('#errorBannerId').show();
                error = true;
            } else {
                hostNumbersArray.push(number);
            }
        })

        if (error) { return; }

        if (useHostPercentages) {
            for (let i = 0; i < hostNumbersArray.length; i += 1) {
                if (hostNumbersArray[i] > 100) {
                    $(this).closest('.input-group').addClass('has-error');
                    $('#errorBannerId').text("Host percentages cannot be greater than 100");
                    $('#errorBannerId').show();
                    error = true;
                }
                if (i > 0 && hostNumbersArray[i - 1] >= hostNumbersArray[i]) {
                    $(this).closest('.input-group').addClass('has-error');
                    $('#errorBannerId').text("Host percentages must be in increasing order");
                    $('#errorBannerId').show();
                    error = true;
                }
            }
        }

        if (error) { return; }

        var cooldownTimes = "";
        var hostNumbers= "";

        const useInfiniteCooldownPeriods = $("#useInfiniteCooldownPeriods")[0].checked;
        $("#sessionTable tr").not(':first').each(function() {
            var hostNumber = $(this).find(".hostNumber input").val();
            if (useHostPercentages) {
                hostNumber += "%";
            }
            if (hostNumbers == "") {
                hostNumbers = hostNumber;
            } else {
                hostNumbers = hostNumbers + "," + hostNumber ;
            }
            var cooldownTime = $(this).find(".cooldownTime input").val();
            if (useInfiniteCooldownPeriods) {
                cooldownTime = "-1";
            }
            if (cooldownTimes == "") {
                cooldownTimes = cooldownTime;
            } else {
                cooldownTimes = cooldownTimes +  "," + cooldownTime;
            }
        });

        $.ajax({
            type: 'POST',
            url: '/env/{{ env.envName }}/{{ env.stageName }}/update_schedule/',
            data: {'csrfmiddlewaretoken': '{{csrf_token}}',
                   'cooldownTimes': cooldownTimes,
                   'hostNumbers': hostNumbers,
                   'totalSessions': totalSessions},
            dataType: "json",
            success: function (data) {
                if(data != null && data.success == false) {
                    $('#errorBannerId').append(data.error);
                    $('#errorBannerId').show();
                } else {
                    $("#envScheduleId").parent().html(data.html);
                    $('#errorBannerId').empty().hide();
                }
            },
            error: function (data) {
                $('#errorBannerId').append(data.responseText);
                $('#errorBannerId').show();
            }
        });
    });

    function updateHostUnits(useHostPercentages) {
        if (useHostPercentages) {
          $("#hostNumberTitle").text("Percentage of Hosts");
        } else {
          $("#hostNumberTitle").text("Number of Hosts");
        }
    }
    // Build the html of a single session configuration row
    function buildSessionHtml(i, hostNumber, hostUnits, cooldownInputDisabled, cooldownTime) {
      return (
        `<tr>
           <td class="sessionNumber" id="sessionNumber${i}"><strong>${i}</strong></td>
           <td class="hostNumber">
             <div class="input-group">
               <input value="${hostNumber}" type="text" class="form-control">
               <span class="input-group-addon">${hostUnits}</span>
             </div>
            </td>
            <td class="cooldownTime">
              <div class="input-group">
                <input ${cooldownInputDisabled} value="${cooldownTime}" type="text" class="form-control">
                <span class="input-group-addon">minutes</span>
              </div>
            </td>
            <td class="text-right">
              <button id="removeBtn" type="button" class="btn btn-danger">Remove</button>
            </td>
          </tr>`
      );
    }

    function resetSchedule() {
        $("#sessionTable tr").not(':first').remove();
        totalSessions = 0;
        totalAgentCount = {{ agent_count }};
    }
</script>
