{% load utils %}

<div id="envScheduleId" class="collapse in panel-body">
    <div class="container-fluid">
        <form id="envCapacityFormId" class="form-horizontal" role="form">
            <div>Note: All sessions will be able to be overidden during the deploy process</div>
            <br />
            <table id="sessionTable" class="table">
            <tr>
                <th class="col-md-3">Session #</th>
                <th class="col-md-3">Number of Hosts</th>
                <th class="col-md-3">Cooldown Period</th>
                <th class="col-md-4"></th>
            </tr>
            <tr>
                <td><strong>Final</strong></td>
                <td class="hostNumber">
                     <div class="input-group">
                        <input disabled type="text" class="form-control">
                        <span class="input-group-addon">hosts</span>
                    </div>
                        <div class="input-group">
                    </div>
                </td>
                <td class="cooldownTime">
                    <div class="input-group">
                        <input disabled type="text" class="form-control">
                        <span class="input-group-addon">minutes</span>
                    </div>
                </td>
                <td class="text-right">
                </td>
            </tr>
            </table>
            {% csrf_token %}
        </form>

        <button type="button" id="addSessionBtn" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span> Add another session</button>
    </div>
</div>

<div class="panel-footer clearfix">
    <div class="pull-right">
        <button id="saveEnvScheduleBtnId" class="btn btn-primary"
                >
            <span class="glyphicon glyphicon-refresh"></span> Save
        </button>
        <button id="resetEnvScheduleBtnId" class="btn btn-default"
                data-loading-text="Reloading...">
            <span class="glyphicon glyphicon-refresh"></span> Reset
        </button>
    </div>
</div>

<script type="text/javascript">
    var totalSessions = 0;
    var totalAgentCount = {{ agent_count }};

    $(document).ready(function() {
        {% if schedule %} //loads schedule information
            var cooldownTimes = "{{ schedule.cooldownTimes }}";
            var hostNumbers = "{{ schedule.hostNumbers }}";
            totalSessions = {{ schedule.totalSessions }};
            var timesArray = cooldownTimes.split(",");
            var numbersArray = hostNumbers.split(",");
            
            var i;
            for (i = 1; i<=totalSessions; i++) {
                $("#sessionTable tr:last").before('<tr><td class="sessionNumber" id=sessionNumber'+i+'><strong>'+i+'</strong></td><td class="hostNumber"><div class="input-group"><input value='+numbersArray[i-1]+' type="text" class="form-control"><span class="input-group-addon">hosts</span></div></div></td><td class="cooldownTime"><div class="input-group"><input value='+timesArray[i-1]+' type="text" class="form-control"><span class="input-group-addon">minutes</span></div></td><td class="text-right"><button id="removeBtn" type="button" class="btn btn-danger">Remove</button></td></tr>');
                totalAgentCount = totalAgentCount - numbersArray[i-1];
            }
        {% endif %}
        $("#sessionTable tr:last").find('.hostNumber input').val(totalAgentCount);
    });

    $(document.body).on("focus", ".hostNumber input", function() { // change final session's host numbers in realtime
        var n = parseInt($(this).val());
        if (!isNaN(n) && n % 1 === 0) { // if is number and is integer
            totalAgentCount = totalAgentCount + parseInt($(this).val());
        }
    });

    $(document.body).on("blur", ".hostNumber input", function() {
        var n = parseInt($(this).val());
        if (!isNaN(n) && n % 1 === 0) { // if is number and is integer
            totalAgentCount = totalAgentCount - parseInt($(this).val());
            $("#sessionTable tr:last").find('.hostNumber input').val(totalAgentCount);
        }
    });

    $("#addSessionBtn").click(function() {
        totalSessions=totalSessions+1;
        $('#sessionTable tr:last').before('<tr><td class="sessionNumber" id=sessionNumber'+totalSessions+'><strong>'+totalSessions+'</strong></td><td class="hostNumber"><div class="input-group"><input type="text" class="form-control"><span class="input-group-addon">hosts</span></div></div></td><td class="cooldownTime"><div class="input-group"><input type="text" class="form-control"><span class="input-group-addon">minutes</span></div></td><td class="text-right"><button id="removeBtn" type="button" class="btn btn-danger">Remove</button></td></tr>');
    });

    $("#sessionTable").on("click", "#removeBtn", function () {
        var n = parseInt($(this).closest('tr').find('.hostNumber input').val());
        if (!isNaN(n) && n % 1 === 0) {
            totalAgentCount = totalAgentCount+n;
        }
        $('#sessionTable tr:last').find('.hostNumber input').val(totalAgentCount)
        $(this).closest('tr').remove();
        totalSessions = totalSessions-1;
        counter = 1; 
        $("#sessionTable tr").not(':first').each(function() { // renumbers the sessions
            var number = $(this).find(".sessionNumber");
            number.text(counter);
            counter=counter+1;
        })
    });

    $(document).on("keyup", "input", function() {
        $("#saveEnvScheduleBtnId").removeAttr('disabled');
    })

    $("#resetEnvScheduleBtnId").click(function() {
        $("#sessionTable tr").not(':first').not(':last').remove(); 
        totalSessions = 0;
        totalAgentCount = {{ agent_count }};
        $("#sessionTable tr:last").find('.hostNumber input').val(totalAgentCount);
    });

    $("#saveEnvScheduleBtnId").click(function() {
        $('.input-group').removeClass('has-error');
        $(this).attr('disabled', 'disabled');
        var error = false;

        // check if number of hosts entered doesn't exceed max
        if (parseInt($("#sessionTable tr:last").find(".hostNumber input").val()) < 0) { 
            $('#errorBannerId').text("Total number of hosts exceeds number of available hosts. Please reenter host numbers.");
            $('#errorBannerId').show();
            error = true;
        }  
        if (error) { return; } 

        // check for valid input values
        $("#sessionTable input").not(":last").each(function() { 
            var number = parseInt($(this).val());
            if (isNaN(number)) {
                $(this).closest('.input-group').addClass('has-error');
                $('#errorBannerId').text("Please make sure all fields are valid integer values.");
                $('#errorBannerId').show();
                error = true; 
            }
        })

        if (error) { return; } 

        // check if entered session numbers doesn't exceed max parallel number
        $("#sessionTable .hostNumber input").not(":last").each(function() { 
            var number = parseInt($(this).val());
            var maxParallel = {{ max_parallel_number }};
            if (number > maxParallel) {
                $(this).closest('.input-group').addClass('has-error');
                $('#errorBannerId').text("Each session's number of hosts cannot exceed maximum parallel number. Please reenter number of hosts or change the maximum parallel number in General Config.");
                $('#errorBannerId').show();
                error = true;
            }
        })

        if (error) { return; } 

        var schedule = '{{ env.schedule }}';
        var cooldownTimes = "";
        var hostNumbers= ""; 

        $("#sessionTable tr").not(':first').not(':last').each(function() { 
            var hostNumber = $(this).find(".hostNumber input").val();
            var cooldownTime = $(this).find(".cooldownTime input").val();
            if (hostNumbers == "") {
                hostNumbers = hostNumber;
            } else {
                hostNumbers = hostNumbers + "," + hostNumber ;
            }
            if (cooldownTimes == "") {
                cooldownTimes = cooldownTime;
            } else {
                cooldownTimes = cooldownTimes +  "," + cooldownTime;
            }
        });

        $.ajax({
            type: 'POST',
            url: '/env/{{ env.envName }}/{{ env.stageName }}/update_schedule/',
            data: {'csrfmiddlewaretoken': '{{csrf_token}}',
                   'cooldownTimes': cooldownTimes, 
                   'hostNumbers': hostNumbers,
                   'totalSessions': totalSessions}, 
            dataType: "json",
            success: function (data) {
                if(data != null && data.success == false) {
                    $('#errorBannerId').append(data.error);
                    $('#errorBannerId').show();
                } else {
                    $("#envScheduleId").parent().html(data.html);
                    $('#errorBannerId').empty().hide();
                }
            },
            error: function (data) {
                $('#errorBannerId').append(data.responseText);
                $('#errorBannerId').show();
            }
        }); 
    });

</script>
