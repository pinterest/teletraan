<div id="capacityPanelId" v-if="showExistingCapacity" class="panel panel-default">
<panel-heading title="Existing Capacity"  target="#envCapacityId" initcollapse="false"></panel-heading>
<div id="envCapacityPanel">
<div id="envCapacityId" class="collapse in panel-body" v-on:show.bs.collapse="showcontent" v-on:hide.bs.collapse="hidecontent">
    <div class="container-fluid">
        <form id="envCapacityFormId" class="form-horizontal" role="form">
            <fieldset id="envCapacityFieldSetId">
                <tag-input-box label="Hosts" ref="hostsinput" v-bind:inittags="hosts" v-bind:placeholder="hostsPlaceholder" v-on:inputtagclick="hostTagClick($event)">
                </tag-input-box>
                <tag-input-box label="Groups" ref="groupsinput" v-bind:inittags="groups" v-bind:placeholder="groupsPlaceholder" v-on:inputtagclick="groupTagClick($event)">
                </tag-input-box>
            </fieldset>
        </form>
    </div>
</div>

<div class="panel-footer clearfix">
    <div class="pull-right">
        <button id="resetEnvCapacityBtnId" class="btn btn-default"
                data-loading-text="Reloading..." v-on:click="reloadCapacity">
            <span class="glyphicon glyphicon-refresh"></span> Reload
        </button>
        <button v-if="isEnvEnabled" id="saveEnvCapacityBtnId" class="btn btn-primary" data-target="#configdialog" data-toggle="modal"
            data-loading-text="Saving...">
            <span class="glyphicon glyphicon-floppy-save"></span> Save
        </button>
    </div>
</div>
<modal v-bind:title="confirmDialogTitle" v-bind:id="confirmDialogId" v-on:input="clickDialog">
    <div slot="body">Are you sure to update the capacity for environment {{env.envName}}({{env.stageName}})?</div>
</modal>
</div>
</div>

<script type="text/javascript">
    var rootVue = new Vue({
        el:"#capacityPanelId",
        data:{
            hosts:hosts,
            hostsPlaceholder:"click here to input",
            groups:groups,
            groupsPlaceholder:"click here to input",
            confirmDialogTitle:"Confirm Capacity Change",
            confirmDialogId:"configdialog",
            headingtoggleclass: "glyphicon glyphicon-chevron-down",
            isEnvEnabled: env != null && env.state==="NORMAL",
            showExistingCapacity: window.showExistingCapacity
        },
        methods:{
            "hostTagClick": function(value){
                var hostLink = "/env/{{ env.envName }}/{{ env.stageName }}/host/"+value;
                window.location.href = hostLink;
            },
            "groupTagClick": function(value){
                var groupLink = '/groups/'+value;
                window.location.href = groupLink;
            },
            "clickDialog": function(value){
                if (value){
                    this.saveCapacity();
                }
            },
            "getToBeUpdatedCapacity": function() {
                // if this env contains a cluster, need to add the cluster's default ASG group into `groups`
                // hasCMPCluster is the signal, and ASG group name is {{ env.envName }}-{{ env.stageName }}
                var groups = rootVue.$refs.groupsinput.tags;
                var image = info.basic_cluster_info.base_image_info;
                if(hasCMPCluster && image && image.abstract_name && image.abstract_name.startsWith('cmp_base')) {
                     var defaultClusterASGGroupName = '{{ env.envName }}-{{ env.stageName }}';
                     if(groups.indexOf(defaultClusterASGGroupName) < 0) {
                        groups.push(defaultClusterASGGroupName);
                     }
                }
                var hosts = rootVue.$refs.hostsinput.tags;
                return {'hosts':hosts, 'groups': groups};
            },
            "reloadCapacity": function(){
                $.ajax({
                    type: 'GET',
                    url: '/env/{{ env.envName }}/{{ env.stageName }}/config/capacity/',
                    dataType: "json",
                    beforeSend: function(xhr, settings) {
                        var csrftoken = getCookie('csrftoken')
                        xhr.setRequestHeader("X-CSRFToken", csrftoken);

                    },
                    success: function (data) {
                        rootVue.hosts = data.hosts;
                        rootVue.groups = data.groups;
                        rootVue.$refs.hostsinput.tags = rootVue.hosts;
                        rootVue.$refs.groupsinput.tags = rootVue.groups;
                    },
                    error: function (data) {
                        globalNotificationBanner.error= data;
                    }
                });
            },
            "saveCapacity": function(){
                var toBeUpdated = this.getToBeUpdatedCapacity();
                $.ajax({
                    type: 'POST',
                    url: '/env/{{ env.envName }}/{{ env.stageName }}/config/capacity/',
                    data: JSON.stringify(toBeUpdated),
                    dataType: "json",
                    beforeSend: function(xhr, settings) {
                        var csrftoken = getCookie('csrftoken')
                        xhr.setRequestHeader("X-CSRFToken", csrftoken);
                    },
                    success: function (data) {
                        if(data != null && data.success == false) {
                            globalNotificationBanner.error = data;
                        } else {
                            globalNotificationBanner.info = "Saved Successfully";
                            window.location.href='/env/{{ env.envName }}/{{ env.stageName }}/config/capacity/'
                        }
                    },
                    error: function (data) {
                        globalNotificationBanner.error = data;
                    }
                });
            },
        }
      }
    )
</script>

