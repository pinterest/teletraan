import java.text.SimpleDateFormat

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

def projectArtifactId = 'swagger2markup-cli'

jar {
    manifest {
        attributes(
                'Built-By': 'Robert Winkler',
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Specification-Title': projectArtifactId,
                'Specification-Version': project.version,
                'Implementation-Title': projectArtifactId,
                'Implementation-Version': project.version,
                'Main-Class': 'io.github.swagger2markup.cli.Application'
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('gpgPassphrase')) ext.gpgPassphrase = ''
if (!project.hasProperty('ossUser')) ext.ossUser = ''
if (!project.hasProperty('ossPassword')) ext.ossPassword = ''

bintray {
    user = project.bintrayUsername
    key = project.bintrayApiKey
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    publications = ['mavenJava']
    pkg {
        repo = 'Maven'
        name = 'swagger2markup-cli'
        userOrg = 'swagger2markup'
        websiteUrl = 'https://github.com/Swagger2Markup/swagger2markup-cli'
        issueTrackerUrl = 'https://github.com/Swagger2Markup/swagger2markup-cli/issues'
        vcsUrl = 'https://github.com/Swagger2Markup/swagger2markup-cli.git'
        desc = 'A Command line Interface (CLI) for Swagger2Markup.'
        licenses = ['Apache-2.0']
        version {
            vcsTag = project.version
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = project.gpgPassphrase //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = ossUser //OSS user token
                password = ossPassword //OSS user password
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                def devs = ['RobWin': 'Robert Winkler']
                def root = asNode()

                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }

                root.appendNode('name', 'swagger2markup-cli')
                root.appendNode('packaging', 'jar')
                root.appendNode('url', 'https://github.com/Swagger2Markup/swagger2markup-cli')
                root.appendNode('description', 'A Command line Interface (CLI) for Swagger2Markup.')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Apache-2.0')
                license.appendNode('url', 'https://github.com/Swagger2Markup/swagger2markup-cli/blob/master/LICENSE.txt')
                license.appendNode('distribution', 'repo')

                root.appendNode('scm').appendNode('url', 'https://github.com/Swagger2Markup/swagger2markup-cli.git')

                def developers = root.appendNode('developers')
                devs.each {
                    def d = developers.appendNode('developer')
                    d.appendNode('id', it.key)
                    d.appendNode('name', it.value)
                }
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }

}

tasks.artifactoryPublish {
    dependsOn 'check'
}